{"id": "skfolio.utils.equations._split_equation_string", "project": "skfolio", "func": "_split_equation_string", "origin_file": "skfolio/utils/equations.py", "test_list": ["tests/test_utils/test_equations.py"], "prob_info": {"func_start_lineno": 347, "func_end_lineno": 371, "key_block_start_lineno": 350, "key_block_end_lineno": 364, "new_func_code": "def _split_equation_string(string: str) -> list[str]:\n    \"\"\"Split an equation strings by operators.\"\"\"\n    comp_pattern = \"(?=\" + \"|\".join([\".+\\\\\" + e for e in _COMPARISON_OPERATORS]) + \")\"\n<complete code here>\n\n    # '==' needs to be before '='\n    operators = sorted(_OPERATORS, reverse=True)\n    pattern = \"((?:\" + \"|\".join([\"\\\\\" + e for e in operators]) + \"))\"\n    res = [x.strip() for x in re.split(pattern, string)]\n    res = [x for x in res if x != \"\"]\n    return res"}, "pytest_info": {"total_num": 12, "base_passed_num": 0}, "score": {"readability_score": "null", "accuracy_score": "null", "completeness_score": "null"}, "LLM_score": {}, "type": "TDD", "language": "Python", "gen_model": "", "is_difficult": ""}
{"id": "skfolio.utils.equations._validate_groups", "project": "skfolio", "func": "_validate_groups", "origin_file": "skfolio/utils/equations.py", "test_list": ["tests/test_utils/test_equations.py"], "prob_info": {"func_start_lineno": 195, "func_end_lineno": 226, "key_block_start_lineno": 210, "key_block_end_lineno": 224, "new_func_code": "def _validate_groups(groups: npt.ArrayLike, name: str = \"groups\") -> np.ndarray:\n    \"\"\"Validate groups by checking its dim and if group names don't appear in multiple\n    levels and convert to numpy array.\n\n    Parameters\n    ----------\n    groups : array-like of shape (n_groups, n_assets)\n        2D-array of strings.\n\n    Returns\n    -------\n    groups : ndarray of shape (n_groups, n_assets)\n        2D-array of strings.\n    \"\"\"\n    groups = np.asarray(groups)\n<complete code here>\n\n    return groups"}, "pytest_info": {"total_num": 12, "base_passed_num": 0}, "score": {"readability_score": "null", "accuracy_score": "null", "completeness_score": "null"}, "LLM_score": {}, "type": "TDD", "language": "Python", "gen_model": "", "is_difficult": ""}
{"id": "skfolio.utils.tools.safe_indexing", "project": "skfolio", "func": "safe_indexing", "origin_file": "skfolio/utils/tools.py", "test_list": ["tests/test_utils/test_tools.py"], "prob_info": {"func_start_lineno": 190, "func_end_lineno": 219, "key_block_start_lineno": 213, "key_block_end_lineno": 219, "new_func_code": "def safe_indexing(\n    X: npt.ArrayLike | pd.DataFrame, indices: npt.ArrayLike | None, axis: int = 0\n):\n    \"\"\"Return rows, items or columns of X using indices.\n\n    Parameters\n    ----------\n    X : array-like\n        Data from which to sample rows.\n\n    indices : array-like, optional\n        Indices of rows or columns.\n        The default (`None`) is to select the entire data.\n\n    axis : int, default=0\n        The axis along which `X` will be sub-sampled. `axis=0` will select\n        rows while `axis=1` will select columns.\n\n    Returns\n    -------\n    subset :\n        Subset of X on axis 0.\n    \"\"\"\n<complete code here>"}, "pytest_info": {"total_num": 21, "base_passed_num": 0}, "score": {"readability_score": "null", "accuracy_score": "null", "completeness_score": "null"}, "LLM_score": {}, "type": "TDD", "language": "Python", "gen_model": "", "is_difficult": ""}
